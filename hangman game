import random

def choose_word():
    # List of words for the game
    word_list = ['python', 'hangman', 'programming', 'developer', 'challenge', 'algorithm']
    return random.choice(word_list)

def display_word(word, guessed_letters):
    # Create a display of the word with underscores for unguessed letters
    display = ''.join([letter if letter in guessed_letters else '_' for letter in word])
    return display

def hangman():
    print("Welcome to Hangman!")
    
    # Choose a random word
    word = choose_word()
    guessed_letters = set()  # Set to track guessed letters
    incorrect_guesses = 0  # Count of incorrect guesses
    max_incorrect_guesses = 6  # Max allowed incorrect guesses
    
    while incorrect_guesses < max_incorrect_guesses:
        # Display the current state of the word
        print("\nWord to guess:", display_word(word, guessed_letters))
        
        # Show the number of incorrect guesses left
        print(f"Incorrect guesses remaining: {max_incorrect_guesses - incorrect_guesses}")
        
        # Ask the player to guess a letter
        guess = input("Guess a letter: ").lower()
        
        # Check for valid input
        if len(guess) != 1 or not guess.isalpha():
            print("Please enter a single letter.")
            continue
        
        if guess in guessed_letters:
            print(f"You already guessed '{guess}'. Try again.")
            continue
        
        # Add guessed letter to the set of guessed letters
        guessed_letters.add(guess)
        
        # Check if the guessed letter is in the word
        if guess in word:
            print(f"Good guess! '{guess}' is in the word.")
        else:
            print(f"Oops! '{guess}' is not in the word.")
            incorrect_guesses += 1
        
        # Check if the player has guessed the word
        if set(word) == guessed_letters:
            print(f"\nCongratulations! You guessed the word: {word}")
            break
    else:
        # If we run out of guesses
        print(f"\nSorry, you've run out of guesses. The word was: {word}")

if __name__ == "__main__":
    hangman()
